rm(list=ls(all=TRUE))
require(rstan)
N_uncensored <- 65L
N_censored <- 15L
M <- 4
group_uncensored <-
c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
4, 4, 4)
group_censored <-
c(1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4)
t_uncensored <-
c(12, 17, 21, 25, 11, 26, 27, 30, 13, 12, 21, 20, 23, 25, 23,
29, 35, 31, 36, 32, 27, 23, 12, 18, 38, 29, 30, 32, 25, 30, 37,
27, 22, 26, 28, 19, 15, 12, 35, 35, 10, 22, 18, 12, 31, 24, 37,
29, 27, 18, 22, 13, 18, 29, 28, 16, 22, 26, 19, 17, 28, 26, 12,
17, 26)
censor_time <-
c(40, 40, 40, 40, 40, 40, 40, 40, 10, 24, 40, 40, 20, 29, 10)
miao = "
data {
int<lower=0> N_uncensored;
int<lower=0> N_censored;
int<lower=0> M;
int<lower=1,upper=M> group_uncensored[N_uncensored];
int<lower=1,upper=M> group_censored[N_censored];
real<lower=0> censor_time[N_censored];
real<lower=0> t_uncensored[N_uncensored];
}
parameters{
real<lower=0> r;
vector[M] beta;
real<lower=1> t2_censored[N_censored];
}
model{
for (i in 1:N_uncensored){
t_uncensored[i] ~ weibull(r, exp(-beta[group_uncensored[i]] / r));
}
for (j in 1:N_censored){
target += weibull_lccdf(censor_time[j]|r, exp(-beta[group_censored[j]] / r));
}
r ~ gamma(1, 1);
beta ~ normal(0, 100);
}
generated quantities {
real median[M];
real pos_control;
real test_sub;
real veh_control;
for (m in 1:M)
median[m] <- pow(log(2) * exp(-beta[m]), 1/r);
veh_control <- beta[2] - beta[1];
test_sub    <- beta[3] - beta[1];
pos_control <- beta[4] - beta[1];
}
"
dataList = list(
N_censored = N_censored ,
N_uncensored = N_uncensored , # BUGS does not treat 1-column mat as vector
M = M ,
group_uncensored = group_uncensored ,
group_censored = group_censored,
censor_time = censor_time,
t_uncensored = t_uncensored
)
miceHMM <- stan(model_code=miao, data=dataList, seed = 47306, chains=4,
iter=5000,
warmup=2000 ) # init=initsChains
summary(miceHMM)
mice1 = "
data {
int<lower=0> N_uncensored;
int<lower=0> N_censored;
int<lower=0> M;
int<lower=1,upper=M> group_uncensored[N_uncensored];
int<lower=1,upper=M> group_censored[N_censored];
real<lower=0> censor_time[N_censored];
real<lower=0> t_uncensored[N_uncensored];
}
parameters {
real<lower=0> r;
real beta[M];
real<lower=1> t2_censored[N_censored]; // t_censored / censor_time
}
model {
r ~ exponential(0.001);
beta ~ normal(0, 100);
for (n in 1:N_uncensored) {
t_uncensored[n] ~ weibull(r, exp(-beta[group_uncensored[n]] / r));
}
for (n in 1:N_censored) {
t2_censored[n] ~ weibull(r, exp(-beta[group_censored[n]] / r) / censor_time[n]);
}
}
generated quantities {
real median[M];
real pos_control;
real test_sub;
real veh_control;
for (m in 1:M)
median[m] <- pow(log(2) * exp(-beta[m]), 1/r);
veh_control <- beta[2] - beta[1];
test_sub    <- beta[3] - beta[1];
pos_control <- beta[4] - beta[1];
}
"
miceHMM1 <- stan(model_code=mice1, data=dataList, seed = 47306, chains=4,
iter=5000,
warmup=2000 ) # init=initsChains
summary(miceHMM1)
require(shinystan)
shinystan::launch_shinystan(miceHMM)
as.data.frame(summary(miceHMM))
t = as.data.frame(summary(miceHMM))
View(t)
t1 = as.data.frame(summary(miceHMM1))
View(t1)
rm(list=ls(all=TRUE))
require(rstan)
require(shinystan)
N_uncensored <- 65L
N_censored <- 15L
M <- 4
group_uncensored <-
c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
4, 4, 4)
group_censored <-
c(1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4)
t_uncensored <-
c(12, 17, 21, 25, 11, 26, 27, 30, 13, 12, 21, 20, 23, 25, 23,
29, 35, 31, 36, 32, 27, 23, 12, 18, 38, 29, 30, 32, 25, 30, 37,
27, 22, 26, 28, 19, 15, 12, 35, 35, 10, 22, 18, 12, 31, 24, 37,
29, 27, 18, 22, 13, 18, 29, 28, 16, 22, 26, 19, 17, 28, 26, 12,
17, 26)
censor_time <-
c(40, 40, 40, 40, 40, 40, 40, 40, 10, 24, 40, 40, 20, 29, 10)
miao = "
data {
int<lower=0> N_uncensored;
int<lower=0> N_censored;
int<lower=0> M;
int<lower=1,upper=M> group_uncensored[N_uncensored];
int<lower=1,upper=M> group_censored[N_censored];
real<lower=0> censor_time[N_censored];
real<lower=0> t_uncensored[N_uncensored];
}
parameters{
real<lower=0> r;
vector[M] beta;
}
model{
for (i in 1:N_uncensored){
t_uncensored[i] ~ weibull(r, exp(-beta[group_uncensored[i]] / r));
}
for (j in 1:N_censored){
target += weibull_lccdf(censor_time[j]|r, exp(-beta[group_censored[j]] / r));
}
r ~ gamma(1, 1);
beta ~ normal(0, 100);
}
generated quantities {
real median[M];
real pos_control;
real test_sub;
real veh_control;
for (m in 1:M)
median[m] <- pow(log(2) * exp(-beta[m]), 1/r);
veh_control <- beta[2] - beta[1];
test_sub    <- beta[3] - beta[1];
pos_control <- beta[4] - beta[1];
}
"
dataList = list(
N_censored = N_censored ,
N_uncensored = N_uncensored , # BUGS does not treat 1-column mat as vector
M = M ,
group_uncensored = group_uncensored ,
group_censored = group_censored,
censor_time = censor_time,
t_uncensored = t_uncensored
)
miceHMM <- stan(model_code=miao, data=dataList, seed = 47306, chains=4,
iter=5000,
warmup=2000 ) # init=initsChains
summary(miceHMM)
shinystan::launch_shinystan(miceHMM)
load("F:/Onedrive/OneDrive - Saint Louis University/MY PAPER/LANCET Abstract 2018/Data/USdata.Rdata")
View(USdata)
table(USdata$YEAR)
install.packages("kableExtra")
install.packages(c("darksky", "latex2exp", "stargazer"))
round(1.28, 2)
round(1.28, 1)
floor(1.28, 1)
?floor
signif(1.28, 1)
signif(1.28, 2)
trunc(1.28, 2)
