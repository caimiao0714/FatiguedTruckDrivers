
```{r BayesianPois}
load("t.Rdata")

library(rstan)
library(rstanarm)
library(shinystan)
options(mc.cores=parallel::detectCores())

t1 = t[1:20000,]

poistan = '
data {
  int<lower=0> n; //total # of obs
  int<lower=0> k;

  int<lower=0> driver_num[n]; //driver id
  int<lower=0> cnum[n]; //count outcome
  real<lower=0> drivetime_cum[n]; //cumulative time of driving
  real<lower=0> travelTime[n];
  int<lower=0> precip_bi[n]; //precipitation
}
parameters{
  real beta0[k];
  real beta1[k];
  real beta2;
  real mu0;
  real mu1;
  real<lower=0> sigma0;
  real<lower=0> sigma1;
}
model{
  for(i in 1:n){
    cnum[i] ~ poisson( travelTime[i] * exp(beta0[driver_num[i]] + beta1[driver_num[i]]*drivetime_cum[i] + beta2*precip_bi[i]) );
  }
  //PRIORS
  beta2 ~ normal(0, 10);
  for(j in 1:k){
  beta0[j] ~ normal(mu0, sigma0);
  beta1[j] ~ normal(mu1, sigma1);
  }
  //HYPERPRIORS
  mu0 ~ normal(0, 10);
  mu1 ~ normal(0, 10);
  sigma0 ~ gamma(1, 1);
  sigma1 ~ gamma(1, 1);
}
'

datstan = list(n = nrow(t1),
               k = max(t1$driver_num),
               travelTime = t1$travelTime,
               driver_num = t1$driver_num,
               cnum = t1$cnum,
               drivetime_cum = t1$drivetime_cum,
               precip_bi = t1$precip_bi)

hfitpois20000 <- stan(model_code=poistan, model_name="Poisstan", data=datstan, iter=5000,warmup = 1000, chains=3, control = list(adapt_delta = 0.95))

save(hfitpois20000, file = "hfitpois20000.Rdata")

launch_shinystan(hfitpois20000)
```



```{r standat}
library(rstan)
library(rstanarm)
library(shinystan)
options(mc.cores=parallel::detectCores())

cPois = '
data {
  int<lower=0>  N0;        //total # of NONcensored obs
  int<lower=0>  N1;        //total # of censored obs
  int<lower=0>  D;        //total # of drivers 
  int<lower=0>  DNUM0[N0];  //driver id NONcensored
  int<lower=0>  DNUM1[N1];  //driver id censored
  int<lower=0,upper=100> Y0[N0];  //# of critical events
  int<lower=0,upper=100> Y1[N1];  //# of critical events
  
  vector<lower=0,upper=50>[N0] T0   ;   //travel time
  vector<lower=0,upper=50>[N0] CT0  ;   //cumulative time of driving
  vector<lower=0,upper=100>[N0] AGE0 ;   //precipitation
  vector<lower=0,upper=10>[N0] VIS0 ;
  vector<lower=0,upper=1>[N0] PREI0;
  vector<lower=0,upper=1>[N0] PREP0;

  vector<lower=0,upper=50>[N1] T1   ;   //travel time
  vector<lower=0,upper=50>[N1] CT1  ;   //cumulative time of driving
  vector<lower=0,upper=100>[N1] AGE1 ;   //precipitation
  vector<lower=0,upper=10>[N1] VIS1 ;
  vector<lower=0,upper=1>[N1] PREI1;
  vector<lower=0,upper=1>[N1] PREP1;
}
parameters{
  real b_age;
  real b_vis;
  real b_prei;
  real b_prep;
  
  real mu0;
  real mu1;
  real<lower=0,upper=10> sigma0;
  real<lower=0,upper=10> sigma1;
  
  vector[D] eta0;
  vector[D] eta1;
}
transformed parameters{
  vector [D]  b0;
  vector [D]  b1;
  
  b0 = 10 * mu0 + eta0 * sigma0;
  b1 = 10 * mu1 + eta1 * sigma1;
}
model{
  for (i in 1:N0){
      Y0[i] ~ poisson_log( b0[DNUM0[i]] + b1[DNUM0[i]]*CT0[i] + b_age*10*AGE0[i] + b_vis*10*VIS0[i] + b_prei*10*PREI0[i] + b_prep*10*PREP0[i] + log(T0[i]) );
  }
  for (j in 1:N1){
      target += poisson_lccdf( Y1[j] | T1[j]*exp(b0[DNUM1[j]] + b1[DNUM1[j]]*CT1[j] + b_age*10*AGE1[j] + b_vis*10*VIS1[j] + b_prei*10*PREI1[j] + b_prep*10*PREP1[j]) );
  }
  
  //PRIORS
  b_age ~ normal(0, 1);
  b_vis ~ normal(0, 1);
  b_prei ~ normal(0, 1);
  b_prep ~ normal(0, 1);
  
  //HYPERPRIORS
  mu0 ~ normal(0, 1);
  mu1 ~ normal(0, 1);
  sigma0 ~ gamma(1, 1);
  sigma1 ~ gamma(1, 1);
  
  eta0 ~ normal(0, 1);
  eta1 ~ normal(0, 1);
}
'



poiNC = dat[dat$cnum <5,]
poiC = dat[dat$cnum >=5,]

poiC$cnum = 5

datstan = list(D = max(dat$driver_num),
               N0 = length(poiNC$driver_num),
               T0 = poiNC$travelTime,
               DNUM0 = poiNC$driver_num,
               Y0 = poiNC$cnum,
               CT0 = poiNC$drivetime_cum,
               AGE0 = poiNC$Age,
               VIS0 = poiNC$visibility,
               PREI0 = poiNC$precipIntensity,
               PREP0 = poiNC$precipProbability,
               N1 = length(poiC$driver_num),
               T1 = poiC$travelTime,
               DNUM1 = poiC$driver_num,
               Y1 = poiC$cnum,
               CT1 = poiC$drivetime_cum,
               AGE1 = poiC$Age,
               VIS1 = poiC$visibility,
               PREI1 = poiC$precipIntensity,
               PREP1 = poiC$precipProbability)



poi1000 <- stan(model_code=cPois, model_name="PoissonCensored", data=datstan, iter=4000,warmup = 2000, chains=1, seed = 123)#, control = list(adapt_delta = 0.9), init = 0.1

shinystan::launch_shinystan(poi1000)

```


set.seed(123)
nobs = 200

travelTime = rnorm(nobs, 2, 0.3)
drivetime_cum = rgamma(nobs, 10, 1)
Age = sample(40:70, nobs, replace = T)
lambda = travelTime*exp(-0.1 + 0.01*Age + 0.01*drivetime_cum)
cnum = rpois(nobs, lambda)
dat = data.frame(lambda, cnum, travelTime, drivetime_cum, Age)

poiNC = dat[dat$cnum <5,]
poiC = dat[dat$cnum >=5,]
poiC$cnum = 5

datstan = list(
               N0 = length(poiNC$travelTime),
               T0 = poiNC$travelTime,
               Y0 = poiNC$cnum,
               N1 = length(poiC$travelTime),
               T1 = poiC$travelTime,
               Y1 = poiC$cnum,
               CT1 = poiC$drivetime_cum,
               CT0 = poiNC$drivetime_cum,
               AGE1 = poiC$Age,
               AGE0 = poiNC$Age)
			   
			   poi1000 <- stan(model_code=cenPois, model_name="PoissonCensored", data=datstan, iter=2000,warmup = 1000, chains=1, seed = 123)
			   
			   options(scipen = 999)


summary(poi1000)$summary[,1]



```{r sim}
set.seed(123)
nobs = 500

driver_num = sample(1:10, nobs, replace = T)
travelTime = rnorm(nobs, 2, 0.3)
drivetime_cum = rgamma(nobs, 10, 1)
Age = sample(40:70, nobs, replace = T)
visibility = rbeta(nobs, 1, 1)
precipIntensity = rbeta(nobs, 1, 20)
precipProbability = rbeta(nobs, 1, 10)
b0 = rep(-3, nobs)

lambda = travelTime*exp(b0 + 0.1*driver_num + 0.02*CT + 0.02*AGE + VIS + PREI + PREP)
cnum = rpois(nobs, lambda)

hist(lambda)

dat = data.frame(lambda, cnum, driver_num, 
                 travelTime, drivetime_cum, Age, visibility, 
                 precipIntensity, precipProbability, b0)
table(dat$cnum)
```

$b0[DNUM0[i]] + b1[DNUM0[i]]*CT0[i] + b_age*10*AGE0[i] + b_vis*10*VIS0[i] + b_prei*10*PREI0[i] + b_prep*10*PREP0[i] + log(T0[i])$


```{r SIMoffset}
set.seed(123)
nobs = 500


travelTime = rnorm(nobs, 2, 0.3)
lambda = travelTime*exp(2)
cnum = rpois(nobs, lambda)

hist(lambda)

dat = data.frame(lambda, cnum, travelTime, 
                 drivetime_cum, Age)
table(dat$cnum)

library(rstan)
library(rstanarm)
library(shinystan)
options(mc.cores=parallel::detectCores())

cPois = '
data {
  int<lower=0>  N0;        //total # of NONcensored obs
  int<lower=0>  N1;        //total # of censored obs
  int<lower=0>  D;        //total # of drivers 
  int<lower=0,upper=100> Y0[N0];  //# of critical events
  int<lower=0,upper=100> Y1[N1];  //# of critical events
  
  vector<lower=0,upper=50>[N0] T0   ;   //travel time
  vector<lower=0,upper=50>[N1] T1   ;   //travel time
}
parameters{
  real lambda;
}
model{
  for (i in 1:N0){
      Y0[i] ~ poisson_log( lambda + log(T0[i]) );
  }
  for (j in 1:N1){
      target += poisson_lccdf( Y1[j] | T1[j]*exp(lambda) );
  }
  
  //PRIORS
  lambda ~ normal(0, 10);
}
'



poiNC = dat[dat$cnum <5,]
poiC = dat[dat$cnum >=5,]

poiC$cnum = 5

datstan = list(D = max(dat$driver_num),
               N0 = length(poiNC$driver_num),
               T0 = poiNC$travelTime,
               Y0 = poiNC$cnum,
               N1 = length(poiC$driver_num),
               T1 = poiC$travelTime,
               Y1 = poiC$cnum)



poi1000 <- stan(model_code=cPois, model_name="PoissonCensored", data=datstan, iter=10000,warmup = 2000, chains=1, seed = 123)#, control = list(adapt_delta = 0.9), init = 0.1

summary(poi1000)$summary

```

